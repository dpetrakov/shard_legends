openapi: 3.0.3
info:
  title: Shard Legends Auth Service API
  description: |
    Микросервис авторизации и аутентификации для игры Shard Legends: Clan Wars.
    
    Обеспечивает авторизацию пользователей через Telegram Web App, 
    генерацию JWT токенов и управление сессиями.
    
    **Основные возможности:**
    - Валидация данных Telegram Web App через HMAC-SHA256
    - Автоматическая регистрация новых пользователей
    - Генерация JWT токенов с RSA подписью (24 часа)
    - Управление активными/отозванными токенами в Redis
    - Rate limiting для защиты от злоупотреблений
  version: 1.0.0
  contact:
    name: Shard Legends Development Team
  license:
    name: MIT

servers:
  - url: https://dev.slcw.dimlight.online/api
    description: Development server
  - url: https://stage.slcw.dimlight.online/api
    description: Staging server  
  - url: https://slcw.dimlight.online/api
    description: Production server

tags:
  - name: Authentication
    description: Операции аутентификации и авторизации
  - name: Health
    description: Проверка состояния сервиса
  - name: Keys
    description: Экспорт публичных ключей для других сервисов
  - name: Admin
    description: Админские операции управления токенами

paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Аутентификация пользователя через Telegram Web App
      description: |
        Основной эндпоинт для авторизации пользователей Telegram Mini App.
        
        **Алгоритм работы:**
        1. Валидация Telegram Web App данных через HMAC-SHA256
        2. Проверка актуальности auth_date (не старше 24 часов)
        3. Поиск пользователя в БД или автоматическая регистрация
        4. Отзыв всех существующих токенов пользователя
        5. Генерация нового JWT токена (24 часа)
        
        **Rate Limiting:** 10 запросов в минуту на IP адрес
      operationId: authenticateUser
      parameters:
        - name: X-Telegram-Init-Data
          in: header
          required: true
          description: |
            URL-encoded строка с данными инициализации от Telegram Web App.
            
            Содержит поля: user, auth_date, hash, query_id (опционально), 
            start_param (опционально), chat (опционально).
            
            Пример: `user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22John%22%7D&auth_date=1672531200&hash=abc123...`
          schema:
            type: string
            example: "user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22John%22%2C%22username%22%3A%22john_doe%22%7D&auth_date=1672531200&hash=a1b2c3d4e5f6..."
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                existing_user:
                  summary: Существующий пользователь
                  value:
                    success: true
                    token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzaGFyZC1sZWdlbmRzLWF1dGgiLCJzdWIiOiI1NTVhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwidGVsZWdyYW1faWQiOjEyMzQ1Njc4OSwiaWF0IjoxNzAzMjQzNDAwLCJleHAiOjE3MDMzMjk4MDAsImp0aSI6IjEyMzQ1Ni03ODkwLWFiY2QtZWZnaC0xMjM0NTY3ODkwIn0..."
                    expires_at: "2024-12-22T10:30:00Z"
                    user:
                      id: "555aaa-bbbb-cccc-dddd-eeeeeeeeeeee"
                      telegram_id: 123456789
                      username: "john_doe"
                      first_name: "John"
                      last_name: "Doe"
                      language_code: "en"
                      is_premium: true
                      is_new_user: false
                new_user:
                  summary: Новый пользователь (автоматическая регистрация)
                  value:
                    success: true
                    token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expires_at: "2024-12-22T15:45:00Z"
                    user:
                      id: "666fff-gggg-hhhh-iiii-jjjjjjjjjjjj"
                      telegram_id: 987654321
                      username: null
                      first_name: "Maria"
                      last_name: null
                      language_code: "ru"
                      is_premium: false
                      is_new_user: true
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_header:
                  summary: Отсутствует обязательный заголовок
                  value:
                    success: false
                    error: "missing_init_data"
                    message: "X-Telegram-Init-Data header is required"
                invalid_format:
                  summary: Некорректный формат данных
                  value:
                    success: false
                    error: "invalid_init_data_format"
                    message: "Unable to parse initData"
                expired_auth_date:
                  summary: Просроченные данные авторизации
                  value:
                    success: false
                    error: "expired_auth_date"
                    message: "auth_date is older than 24 hours"
        '401':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_signature:
                  summary: Невалидная подпись Telegram
                  value:
                    success: false
                    error: "invalid_telegram_signature"
                    message: "HMAC-SHA256 signature verification failed"
                invalid_user_data:
                  summary: Некорректные данные пользователя
                  value:
                    success: false
                    error: "invalid_user_data"
                    message: "User object is missing required fields"
        '429':
          description: Превышен лимит запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "rate_limit_exceeded"
                message: "Too many requests. Limit: 10 requests per minute"
          headers:
            Retry-After:
              description: Количество секунд до следующего разрешенного запроса
              schema:
                type: integer
                example: 60
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                database_error:
                  summary: Ошибка базы данных
                  value:
                    success: false
                    error: "internal_server_error"
                    message: "Database connection failed"
                redis_error:
                  summary: Ошибка Redis
                  value:
                    success: false
                    error: "internal_server_error"
                    message: "Token storage unavailable"

  /health:
    get:
      tags:
        - Health
      summary: Проверка состояния сервиса
      description: |
        Эндпоинт для мониторинга состояния auth-service и его зависимостей.
        
        Проверяет доступность:
        - Подключения к PostgreSQL
        - Подключения к Redis
        - Загрузки RSA ключей для JWT
      operationId: healthCheck
      responses:
        '200':
          description: Сервис работает корректно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-12-21T10:30:00Z"
                version: "1.0.0"
                dependencies:
                  postgresql: "healthy"
                  redis: "healthy"
                  jwt_keys: "loaded"
        '503':
          description: Сервис недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "unhealthy"
                timestamp: "2024-12-21T10:30:00Z"
                version: "1.0.0"
                dependencies:
                  postgresql: "unhealthy"
                  redis: "healthy" 
                  jwt_keys: "loaded"

  /jwks:
    get:
      tags:
        - Keys
      summary: Получение публичного ключа в формате JWKS
      description: |
        Эндпоинт для получения публичного RSA ключа в стандартном формате JWKS 
        (JSON Web Key Set) для валидации JWT токенов в других микросервисах.
        
        **Использование:**
        - Другие сервисы могут использовать этот ключ для локальной валидации JWT токенов
        - Стандартный формат JWKS совместим с большинством JWT библиотек
        - Ключ автоматически обновляется при перегенерации RSA ключей
      operationId: getJWKS
      responses:
        '200':
          description: Публичный ключ в формате JWKS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSResponse'
              example:
                keys:
                  - kty: "RSA"
                    use: "sig"
                    alg: "RS256"
                    kid: "30820122300d0609"
                    pem: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...\n-----END PUBLIC KEY-----\n"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "internal_server_error"
                message: "Failed to retrieve public key"

  /public-key.pem:
    get:
      tags:
        - Keys
      summary: Получение публичного ключа в формате PEM
      description: |
        Простой эндпоинт для получения публичного RSA ключа в формате PEM 
        для валидации JWT токенов в других микросервисах.
        
        **Использование:**
        - Удобен для простой интеграции в сервисы без JWKS поддержки
        - Прямой PEM формат для загрузки в RSA библиотеки
        - Тот же ключ, что и в /jwks, но в более простом формате
      operationId: getPublicKeyPEM
      responses:
        '200':
          description: Публичный ключ в формате PEM
          content:
            text/plain:
              schema:
                type: string
                description: RSA публичный ключ в формате PEM
              example: |
                -----BEGIN PUBLIC KEY-----
                MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+Z8sOyi18JGKNPFgoQsu
                h9C5taw369yy2S4OfnKd9SdCwwHhZbU6Cx/j+9My8+34hcxbv6kkU7VS4C4BXIKu
                m/hG119Ay5hsSQ9FES1nWE4Hrwe4a00ocO+kY04fyIGrnNh4uSsq5GdwVFT+dfpp
                EaM1CSCP2Xak6SVmQVw1f4DdCHKNwH3xVmhT8qX3ijhL3FIF3T3PYbP5G9PpTj5Y
                uT00vFQc+nds/E7k9eVzjrgSNawMWKMJa76rbBKiCaq5GPeOi00eMyDrCd3v+jYY
                iQ50xGviFVYeKzLxJXxX/QBOkD7kzBchB3BEXDsQxK4hmqX20hu8g4vrvOGEGWRS
                fwIDAQAB
                -----END PUBLIC KEY-----
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
              example: "Internal server error"

  /admin/tokens/stats:
    get:
      tags:
        - Admin
      summary: Статистика активных токенов
      description: |
        Получение статистики по активным токенам и информации о последней очистке.
        
        **Использование:** Мониторинг состояния токенов и производительности системы.
      operationId: getTokenStats
      responses:
        '200':
          description: Статистика токенов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenStatsResponse'
              example:
                active_tokens: 1247
                unique_users: 892
                cleanup_stats:
                  last_cleanup: "2024-12-21T15:30:00Z"
                  expired_tokens_cleaned: 156
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/tokens/user/{userId}:
    get:
      tags:
        - Admin
      summary: Получение активных токенов пользователя
      description: Получение списка всех активных токенов для указанного пользователя
      operationId: getUserTokens
      parameters:
        - name: userId
          in: path
          required: true
          description: UUID пользователя
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список активных токенов пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokensResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
      summary: Отзыв всех токенов пользователя
      description: Отзывает все активные токены указанного пользователя
      operationId: revokeUserTokens
      parameters:
        - name: userId
          in: path
          required: true
          description: UUID пользователя
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Токены успешно отозваны
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeTokensResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/tokens/{jti}:
    delete:
      tags:
        - Admin
      summary: Отзыв конкретного токена
      description: Отзывает токен по его JTI (JWT ID)
      operationId: revokeToken
      parameters:
        - name: jti
          in: path
          required: true
          description: JWT ID токена
          schema:
            type: string
      responses:
        '200':
          description: Токен успешно отозван
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeTokenResponse'
        '404':
          description: Токен не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/tokens/cleanup:
    post:
      tags:
        - Admin
      summary: Принудительная очистка просроченных токенов
      description: |
        Запускает принудительную очистку просроченных токенов из пользовательских индексов.
        
        **Примечание:** Обычно очистка происходит автоматически каждый час, 
        но этот эндпоинт позволяет запустить ее вручную.
      operationId: cleanupTokens
      responses:
        '200':
          description: Очистка выполнена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupResponse'
        '500':
          description: Ошибка при выполнении очистки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AuthResponse:
      type: object
      required:
        - success
        - token
        - expires_at
        - user
      properties:
        success:
          type: boolean
          description: Статус успешности операции
          example: true
        token:
          type: string
          description: JWT токен для авторизации (RS256, 24 часа)
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzaGFyZC1sZWdlbmRzLWF1dGgiLCJzdWIiOiI1NTVhYWEtYmJiYi1jY2NjLWRkZGQtZWVlZWVlZWVlZWVlIiwidGVsZWdyYW1faWQiOjEyMzQ1Njc4OSwiaWF0IjoxNzAzMjQzNDAwLCJleHAiOjE3MDMzMjk4MDAsImp0aSI6IjEyMzQ1Ni03ODkwLWFiY2QtZWZnaC0xMjM0NTY3ODkwIn0..."
        expires_at:
          type: string
          format: date-time
          description: Время истечения токена (ISO 8601)
          example: "2024-12-22T10:30:00Z"
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - id
        - telegram_id
        - first_name
        - is_new_user
      properties:
        id:
          type: string
          format: uuid
          description: Внутренний UUID пользователя в системе
          example: "555aaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        telegram_id:
          type: integer
          format: int64
          description: Уникальный ID пользователя в Telegram
          example: 123456789
        username:
          type: string
          nullable: true
          description: Username в Telegram (может отсутствовать)
          example: "john_doe"
        first_name:
          type: string
          description: Имя пользователя в Telegram
          example: "John"
        last_name:
          type: string
          nullable: true
          description: Фамилия пользователя в Telegram (может отсутствовать)
          example: "Doe"
        language_code:
          type: string
          nullable: true
          description: Код языка пользователя (ISO 639-1)
          example: "en"
        is_premium:
          type: boolean
          description: Статус Telegram Premium пользователя
          example: true
        photo_url:
          type: string
          nullable: true
          description: URL фото профиля пользователя
          example: "https://t.me/i/userpic/320/abc123.jpg"
        is_new_user:
          type: boolean
          description: True, если пользователь был зарегистрирован в ходе этого запроса
          example: false

    ErrorResponse:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          description: Статус операции (всегда false для ошибок)
          example: false
        error:
          type: string
          description: Код ошибки для программной обработки
          enum:
            - missing_init_data
            - invalid_init_data_format
            - expired_auth_date
            - invalid_telegram_signature
            - invalid_user_data
            - rate_limit_exceeded
            - internal_server_error
          example: "invalid_telegram_signature"
        message:
          type: string
          description: Человекочитаемое описание ошибки
          example: "HMAC-SHA256 signature verification failed"
        details:
          type: object
          description: Дополнительные детали ошибки (опционально)
          additionalProperties: true

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Общий статус сервиса
          enum:
            - healthy
            - unhealthy
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Время проверки состояния (ISO 8601)
          example: "2024-12-21T10:30:00Z"
        version:
          type: string
          description: Версия сервиса
          example: "1.0.0"
        dependencies:
          type: object
          description: Состояние зависимостей сервиса
          properties:
            postgresql:
              type: string
              enum:
                - healthy
                - unhealthy
              example: "healthy"
            redis:
              type: string
              enum:
                - healthy
                - unhealthy
              example: "healthy"
            jwt_keys:
              type: string
              enum:
                - loaded
                - missing
              example: "loaded"

    JWKSResponse:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          description: Массив JSON Web Keys
          items:
            $ref: '#/components/schemas/JWK'
          example:
            - kty: "RSA"
              use: "sig"
              alg: "RS256"
              kid: "30820122300d0609"
              pem: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...\n-----END PUBLIC KEY-----\n"

    JWK:
      type: object
      required:
        - kty
        - use
        - alg
        - kid
        - pem
      properties:
        kty:
          type: string
          description: Тип ключа
          enum:
            - RSA
          example: "RSA"
        use:
          type: string
          description: Назначение ключа
          enum:
            - sig
          example: "sig"
        alg:
          type: string
          description: Алгоритм подписи
          enum:
            - RS256
          example: "RS256"
        kid:
          type: string
          description: Уникальный идентификатор ключа (fingerprint)
          example: "30820122300d0609"
        pem:
          type: string
          description: Публичный ключ в формате PEM
          example: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...\n-----END PUBLIC KEY-----\n"

    TokenStatsResponse:
      type: object
      required:
        - active_tokens
        - unique_users
      properties:
        active_tokens:
          type: integer
          description: Количество активных токенов в системе
          example: 1247
        unique_users:
          type: integer
          description: Количество уникальных пользователей с активными токенами
          example: 892
        cleanup_stats:
          type: object
          description: Статистика последней очистки токенов
          properties:
            last_cleanup:
              type: string
              format: date-time
              description: Время последней автоматической очистки
              example: "2024-12-21T15:30:00Z"
            expired_tokens_cleaned:
              type: integer
              description: Количество удаленных просроченных токенов при последней очистке
              example: 156

    UserTokensResponse:
      type: object
      required:
        - user_id
        - active_tokens
      properties:
        user_id:
          type: string
          format: uuid
          description: UUID пользователя
          example: "555aaa-bbbb-cccc-dddd-eeeeeeeeeeee"
        active_tokens:
          type: array
          description: Список активных токенов пользователя
          items:
            type: object
            properties:
              jti:
                type: string
                description: JWT ID токена
                example: "12345-67890-abcdef"
              issued_at:
                type: string
                format: date-time
                description: Время выдачи токена
                example: "2024-12-21T10:30:00Z"
              expires_at:
                type: string
                format: date-time
                description: Время истечения токена
                example: "2024-12-22T10:30:00Z"

    RevokeTokensResponse:
      type: object
      required:
        - success
        - revoked_tokens
        - user_id
      properties:
        success:
          type: boolean
          description: Статус операции
          example: true
        revoked_tokens:
          type: integer
          description: Количество отозванных токенов
          example: 3
        user_id:
          type: string
          format: uuid
          description: UUID пользователя
          example: "555aaa-bbbb-cccc-dddd-eeeeeeeeeeee"

    RevokeTokenResponse:
      type: object
      required:
        - success
        - revoked_token
      properties:
        success:
          type: boolean
          description: Статус операции
          example: true
        revoked_token:
          type: string
          description: JTI отозванного токена
          example: "12345-67890-abcdef"

    CleanupResponse:
      type: object
      required:
        - success
        - cleanup_stats
      properties:
        success:
          type: boolean
          description: Статус операции
          example: true
        cleanup_stats:
          type: object
          description: Результаты очистки
          properties:
            processed_users:
              type: integer
              description: Количество обработанных пользователей
              example: 234
            expired_tokens_cleaned:
              type: integer
              description: Количество удаленных просроченных токенов
              example: 89
            duration_ms:
              type: integer
              description: Время выполнения очистки в миллисекундах
              example: 1247

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT токен, полученный от эндпоинта /auth.
        
        Формат заголовка: `Authorization: Bearer <token>`
        
        **Примечание:** Данная схема безопасности используется другими сервисами
        для валидации токенов, выданных auth-service.

security: []

externalDocs:
  description: Подробная техническая спецификация Auth Service
  url: ./auth-service.md