openapi: 3.0.3
info:
  title: Deck Game Service API
  description: |
    Публичные эндпоинты мини-игры «Дека» для выдачи ежедневных сундуков.
  version: 1.0.0
  contact:
    name: Shard Legends Team

servers:
  - url: http://localhost:9000/api/
    description: Local Dev (direct)

security:
  - bearerAuth: []

tags:
  - name: Public
    description: Публичные методы для фронтенда

paths:
  /deck/daily-chest/status:
    get:
      tags: [Public]
      summary: Получить ожидаемый комбо и статус сундуков
      operationId: getDailyChestStatus
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /deck/daily-chest/claim:
    post:
      tags: [Public]
      summary: Получить награду за выполненное комбо
      operationId: claimDailyChest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimRequest'
      responses:
        '200':
          description: Награда получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimResponse'
        '400':
          description: Ошибка бизнес-валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Рецепт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /deck/chest/open:
    post:
      tags: [Public]
      summary: Открыть сундуки указанного типа и качества
      operationId: openChest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenChestRequest'
      responses:
        '200':
          description: Сундуки успешно открыты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenChestResponse'
        '400':
          description: Ошибка бизнес-валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Рецепт или сундук не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /deck/item/buy:
    post:
      tags: [Public]
      summary: Покупка предмета по рецепту или коду товара
      description: |
        Позволяет купить предмет по идентификатору рецепта или по коду товара (с указанием качества и серии).
        Если найден ровно один подходящий рецепт — используется его id. Если не найден или найдено несколько — возвращается ошибка.
      operationId: buyItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyItemRequest'
      responses:
        '200':
          description: Успешная покупка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyItemResponse'
        '400':
          description: Ошибка бизнес-валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Рецепт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Найдено несколько подходящих рецептов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /deck/shop/sapphires:
    get:
      tags: [Public]
      summary: Получить список товаров в магазине за сапфиры
      description: |
        Возвращает список товаров, которые можно купить за сапфиры. В ответе только те рецепты, у которых на входе только сапфиры.
        Снятие ограничения по количеству выходных предметов позволяет получить все доступные товары.
        Поля collection_code и quality_level_code не включаются в ответ, если их значение равно "base" (значение по умолчанию).
      operationId: getSapphiresShopItems
      responses:
        '200':
          description: Список товаров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SapphiresShopRecipe'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Пользовательский JWT c RS256-подписью Auth Service

  schemas:
    StatusResponse:
      type: object
      required: [expected_combo, finished, crafts_done]
      properties:
        expected_combo:
          type: integer
          minimum: 5
          maximum: 15
        finished:
          type: boolean
        crafts_done:
          type: integer
          minimum: 0
          maximum: 10
        last_reward_at:
          type: string
          format: date-time
          nullable: true

    ClaimRequest:
      type: object
      required: [combo, chest_indices]
      properties:
        combo:
          type: integer
          minimum: 5
          maximum: 15
        chest_indices:
          type: array
          minItems: 1
          maxItems: 6
          items:
            type: integer
            minimum: 1
            maximum: 6

    ItemInfo:
      type: object
      required: [item_id, item_class, item_type, name, description, image_url, quantity]
      properties:
        item_id:
          type: string
          description: Уникальный идентификатор предмета
        item_class:
          type: string
          description: Класс предмета
        item_type:
          type: string
          description: Тип предмета
        name:
          type: string
          description: Название предмета
        description:
          type: string
          description: Описание предмета
        image_url:
          type: string
          description: URL изображения предмета
        collection:
          type: string
          nullable: true
          description: Серия/коллекция предмета
        quality_level:
          type: string
          nullable: true
          description: Уровень качества предмета
        quantity:
          type: integer
          minimum: 1
          description: Количество предметов

    ClaimResponse:
      type: object
      required: [items, next_expected_combo, crafts_done]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemInfo'
        next_expected_combo:
          type: integer
        crafts_done:
          type: integer

    OpenChestRequest:
      type: object
      description: Ровно одно из полей `quantity` или `open_all` должно быть задано.
      required: [chest_type, quality_level]
      properties:
        chest_type:
          type: string
          description: Тип сундука
          enum: [resource_chest, reagent_chest, booster_chest, blueprint_chest]
        quality_level:
          type: string
          enum: [small, medium, large]
        quantity:
          type: integer
          minimum: 1
          maximum: 100
        open_all:
          type: boolean
          description: Если true, открыть все доступные сундуки указанного типа и качества
      oneOf:
        - required: [quantity]
        - required: [open_all]
      example:
        chest_type: resource_chest
        quality_level: medium
        open_all: true

    OpenChestResponse:
      type: object
      required: [items, quantity_opened]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemInfo'
        quantity_opened:
          type: integer

    BuyItemRequest:
      type: object
      description: |
        Запрос на покупку предмета. Должен содержать либо recipe_id, либо item_code с дополнительными параметрами.
      properties:
        recipe_id:
          type: string
          format: uuid
          description: Идентификатор рецепта для покупки
        item_code:
          type: string
          description: Код покупаемого предмета
        quality_level_code:
          type: string
          description: Качество предмета (например, small/medium/large/base)
        collection_code:
          type: string
          description: Серия/коллекция предмета (если применимо)
        quantity:
          type: integer
          default: 1
          minimum: 1
          description: Количество предметов для покупки
      oneOf:
        - required: [recipe_id]
        - required: [item_code]
      example:
        item_code: "sword"
        quality_level_code: "medium"
        collection_code: "warrior"
        quantity: 1

    BuyItemResponse:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemInfo'
          description: Список купленных предметов

    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string

    SapphiresShopRecipe:
      type: object
      required: [recipe_id, code, input, output]
      properties:
        recipe_id:
          type: string
          format: uuid
        code:
          type: string
        input:
          type: array
          items:
            $ref: '#/components/schemas/SapphiresShopItem'
        output:
          $ref: '#/components/schemas/SapphiresShopItem'
    SapphiresShopItem:
      type: object
      required: [item_id, code]
      properties:
        item_id:
          type: string
          format: uuid
          description: Уникальный идентификатор предмета
        code:
          type: string
          description: Код предмета
        collection_code:
          type: string
          nullable: true
          description: Код коллекции (опущается для "base")
        quality_level_code:
          type: string
          nullable: true
          description: Код качества (опущается для "base")
        quantity:
          type: integer
          minimum: 1
          description: Количество предметов (для входных предметов)
        min_quantity:
          type: integer
          minimum: 1
          description: Минимальное количество предметов (для выходных предметов)
        max_quantity:
          type: integer
          minimum: 1
          description: Максимальное количество предметов (для выходных предметов)

  responses:
    Unauthorized:
      description: Отсутствует или недействительный JWT
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: missing_token
            message: Missing Authorization header

    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: internal_error
            message: Unexpected server error 