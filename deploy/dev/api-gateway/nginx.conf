# Internal API Gateway Configuration
# Aggregates all microservices under /api/* endpoints

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream=$upstream_addr response_time=$upstream_response_time';
    

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain application/json application/xml text/css text/js text/xml application/xml+rss text/javascript;

    # Map original URI from external nginx to appropriate upstream
    map $http_x_original_uri $target_upstream {
        default                  auth_service;
        ~^/api/webhook          telegram_bot_service;
        ~^/api/auth             auth_service;
        ~^/api/inventory        inventory_service;
        ~^/api/user             user_service;
        ~^/api/production       production_service;
    }
    
    map $http_x_original_uri $target_path {
        default                  auth;
        ~^/api/webhook          webhook;
        ~^/api/auth             auth;
        ~^/api/inventory        inventory;
        ~^/api/user             user;
        ~^/api/production       production;
    }

    # Upstream definitions for microservices
    
    upstream telegram_bot_service {
        server telegram-bot-service:8080;
    }
    
    upstream telegram_bot_service_forly {
        server telegram-bot-service-forly:8080;
    }
    
    upstream auth_service {
        server auth-service:8080;
    }
    
    upstream inventory_service {
        server inventory-service:8080;
    }
    
    upstream user_service {
        server user-service:8080;
    }
    
    upstream production_service {
        server production-service:8080;
    }


    server {
        listen 8080;
        server_name localhost;

        # Common proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 30s;
        proxy_connect_timeout 10s;

        # Health check for the gateway itself
        location /health {
            access_log off;
            return 200 "API Gateway OK\n";
            add_header Content-Type text/plain;
        }

        # ==================== MICROSERVICES ROUTING ====================
        # External nginx strips /api/* prefix before sending to API Gateway
        
        # Telegram Bot Service - Main (Dim)
        location /webhook {
            proxy_pass http://telegram_bot_service/webhook;
        }
        
        location /auth/ {
            # Forward to auth service, stripping /auth prefix
            proxy_pass http://auth_service/;
            # Forward original headers for Telegram validation
            proxy_pass_request_headers on;
        }
        
        # Handle exact /auth requests
        location = /auth {
            proxy_pass http://auth_service/;
            proxy_pass_request_headers on;
        }
        
        # Inventory Service - Inventory and items management
        location /inventory/ {
            # Forward to /api/inventory/ on inventory service, preserving subpaths
            proxy_pass http://inventory_service/api/inventory/;
            proxy_pass_request_headers on;
        }
        
        # Handle exact /inventory requests (for GET /api/inventory)
        location = /inventory {
            proxy_pass http://inventory_service/api/inventory;
            proxy_pass_request_headers on;
        }
        
        # User Service - User management and profiles
        location /user/ {
            # Forward to user service, preserving subpaths
            proxy_pass http://user_service/;
            proxy_pass_request_headers on;
        }
        
        # Handle exact /user requests
        location = /user {
            proxy_pass http://user_service/;
            proxy_pass_request_headers on;
        }
        
        # Production Service - Production recipes and manufacturing
        location /production/ {
            # Forward to production service, preserving subpaths
            proxy_pass http://production_service/;
            proxy_pass_request_headers on;
        }
        
        # Handle exact /production requests
        location = /production {
            proxy_pass http://production_service/;
            proxy_pass_request_headers on;
        }

        # Note: /health endpoints are for internal Docker health checks only
        # and should not be exposed externally through API Gateway
        
        # location /api/game {
        #     proxy_pass http://game_service/game;
        # }

        # ==================== FALLBACK ====================
        
        # Special handling for stripped paths from external nginx
        # Use X-Original-URI header to determine the correct service
        location = / {
            # Route based on original URI from external nginx
            proxy_pass http://$target_upstream/$target_path;
        }
        
        # Catch-all for other undefined endpoints
        location / {
            return 200 '{"service": "SLCW API Gateway", "version": "1.0", "endpoints": ["/webhook", "/auth", "/inventory", "/user", "/production"]}\n';
            add_header Content-Type application/json;
        }
    }
}