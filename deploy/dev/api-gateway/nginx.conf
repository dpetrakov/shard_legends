# Internal API Gateway Configuration
# Aggregates all microservices under /api/* endpoints

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream=$upstream_addr response_time=$upstream_response_time';
    

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain application/json application/xml text/css text/js text/xml application/xml+rss text/javascript;

    # Upstream definitions for microservices with dynamic DNS resolution
    resolver 127.0.0.11 valid=10s ipv6=off;
    
    upstream auth_service {
        server auth-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }
    
    upstream inventory_service {
        server inventory-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }
    
    upstream user_service {
        server user-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }
    
    upstream production_service {
        server production-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }
    
    upstream telegram_bot_service {
        server telegram-bot-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }
    
    upstream deck_game_service {
        server deck-game-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 2;
    }

    server {
        listen 8080;
        server_name localhost;

        # Common proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 30s;
        proxy_connect_timeout 10s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;

        # Health check for the gateway itself
        location /health {
            access_log off;
            return 200 "API Gateway OK\n";
            add_header Content-Type text/plain;
        }

        # ==================== API ROUTES ====================
        
        # Auth Service - External port 8080
        location = /api/auth {
            proxy_pass http://auth_service/auth;
            proxy_pass_request_headers on;
        }
        
        location /api/auth/ {
            proxy_pass http://auth_service/auth/;
            proxy_pass_request_headers on;
        }
        
        # Inventory Service
        location = /api/inventory {
            proxy_pass http://inventory_service/api/inventory;
            proxy_pass_request_headers on;
        }
        
        location /api/inventory/ {
            rewrite ^/api/inventory/(.*)$ /$1 break;
            proxy_pass http://inventory_service;
            proxy_pass_request_headers on;
        }
        
        # User Service
        location = /api/user {
            proxy_pass http://user_service/;
            proxy_pass_request_headers on;
        }
        
        location /api/user/ {
            rewrite ^/api/user/(.*)$ /$1 break;
            proxy_pass http://user_service;
            proxy_pass_request_headers on;
        }
        
        # Production Service
        location = /api/production {
            proxy_pass http://production_service/production;
            proxy_pass_request_headers on;
        }
        
        location /api/production/ {
            proxy_pass http://production_service/production/;
            proxy_pass_request_headers on;
        }
        
        # Telegram Bot Service
        location /api/webhook {
            proxy_pass http://telegram_bot_service/webhook;
            proxy_pass_request_headers on;
        }
        
        # Deck Game Service
        location = /api/deck {
            proxy_pass http://deck_game_service/deck;
            proxy_pass_request_headers on;
        }
        
        location /api/deck/ {
            proxy_pass http://deck_game_service/deck/;
            proxy_pass_request_headers on;
        }

        # Default endpoint - API Gateway info
        location / {
            return 200 '{"service": "SLCW API Gateway", "version": "1.0", "endpoints": ["/api/auth", "/api/inventory", "/api/user", "/api/production", "/api/webhook", "/api/deck"]}\n';
            add_header Content-Type application/json;
        }
    }
}