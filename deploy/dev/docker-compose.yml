services:
  # API Gateway - Internal microservices aggregator
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: slcw-api-gateway-dev
    ports:
      - "127.0.0.1:9000:8080"  # Single API endpoint for external nginx
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=api-gateway"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - ping-service
      - telegram-bot-service
      - auth-service
      - inventory-service

  # Frontend service
  frontend:
    build:
      context: ../..
      dockerfile: deploy/dev/frontend.Dockerfile
    container_name: slcw-frontend-dev
    ports:
      - "127.0.0.1:8092:3000"  # Map to Next.js default port
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=frontend"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ping service (test microservice)
  ping-service:
    build:
      context: ../../services/ping-service
      dockerfile: Dockerfile
    container_name: slcw-ping-service-dev
    # No external ports - accessed via API Gateway
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=ping-service"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    # Health check is defined in Dockerfile

  # Telegram Bot Service
  telegram-bot-service:
    build:
      context: ../../services/telegram-bot-service
      dockerfile: Dockerfile
    container_name: slcw-telegram-bot-dev
    # No external ports - accessed via API Gateway
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_MODE=${TELEGRAM_BOT_MODE:-longpoll}
      - TELEGRAM_POLL_TIMEOUT=${TELEGRAM_POLL_TIMEOUT:-30}
      - WEBAPP_BASE_URL=${WEBAPP_BASE_URL:-https://dev.slcw.dimlight.online}
      - MINI_APP_SHORT_NAME=${MINI_APP_SHORT_NAME}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL:-}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN:-}
      - TELEGRAM_ALLOWED_USERS=${TELEGRAM_ALLOWED_USERS:-}
      - SERVICE_PORT=8080
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=telegram-bot-service"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Auth Service - Authentication and Authorization
  auth-service:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    container_name: slcw-auth-service-dev
    # No external ports - accessed via API Gateway
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-slcw_user}:${POSTGRES_PASSWORD:-dev_password_2024}@postgres:5432/${POSTGRES_DB:-shard_legends_dev}?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_TOKEN_SECONDARY=${TELEGRAM_BOT_TOKEN_FORLY:-}
      - AUTH_SERVICE_HOST=0.0.0.0
      - AUTH_SERVICE_PORT=8080
      - DATABASE_MAX_CONNECTIONS=10
      - REDIS_MAX_CONNECTIONS=10
      - JWT_ISSUER=shard-legends-auth
      - JWT_EXPIRY_HOURS=24
      - JWT_PRIVATE_KEY_PATH=/etc/auth/private_key.pem
      - JWT_PUBLIC_KEY_PATH=/etc/auth/public_key.pem
      - RATE_LIMIT_REQUESTS=10
      - RATE_LIMIT_WINDOW=60s
    volumes:
      - auth_jwt_keys:/etc/auth
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=auth-service"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Inventory Service - Inventory and items management
  inventory-service:
    build:
      context: ../../services/inventory-service
      dockerfile: Dockerfile
    container_name: slcw-inventory-service-dev
    ports:
      - "127.0.0.1:22003:8080"  # Single API endpoint for external nginx
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-slcw_user}:${POSTGRES_PASSWORD:-dev_password_2024}@postgres:5432/${POSTGRES_DB:-shard_legends_dev}?sslmode=disable
      - REDIS_URL=redis://redis:6379/1
      - INVENTORY_SERVICE_HOST=0.0.0.0
      - INVENTORY_SERVICE_PORT=8080
      - DATABASE_MAX_CONNECTIONS=10
      - REDIS_MAX_CONNECTIONS=10
      - LOG_LEVEL=info
      - METRICS_PORT=9090
    networks:
      - slcw-dev
      - slcw-monitoring
    restart: unless-stopped
    labels:
      - "logging.service=inventory-service"
      - "logging.environment=dev"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging.service,logging.environment"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Database Migrations - All Services
  migrate:
    build: ../../migrations
    container_name: slcw-migrate-dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-slcw_user}:${POSTGRES_PASSWORD:-dev_password_2024}@postgres:5432/${POSTGRES_DB:-shard_legends_dev}?sslmode=disable
    volumes:
      - ../../migrations:/migrations
    networks:
      - slcw-dev
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migrations
    # Команда по умолчанию "up" из Dockerfile

  # Telegram Bot Service - Forly (optional)
  telegram-bot-service-forly:
    build:
      context: ../../services/telegram-bot-service
      dockerfile: Dockerfile
    container_name: slcw-telegram-bot-forly-dev
    # No external ports - accessed via API Gateway
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN_FORLY:-DISABLED}
      - TELEGRAM_BOT_MODE=${TELEGRAM_BOT_MODE_FORLY:-longpoll}
      - TELEGRAM_POLL_TIMEOUT=${TELEGRAM_POLL_TIMEOUT_FORLY:-30}
      - WEBAPP_BASE_URL=${WEBAPP_BASE_URL_FORLY:-https://dev-forly.slcw.dimlight.online}
      - MINI_APP_SHORT_NAME=${MINI_APP_SHORT_NAME_FORLY:-DISABLED}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL_FORLY:-}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN_FORLY:-}
      - TELEGRAM_ALLOWED_USERS=${TELEGRAM_ALLOWED_USERS_FORLY:-}
      - SERVICE_PORT=8080
    networks:
      - slcw-dev
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles:
      - forly

  # PostgreSQL 17 - Primary database
  postgres:
    image: postgres:17-alpine
    container_name: slcw-postgres-dev
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shard_legends_dev}
      - POSTGRES_USER=${POSTGRES_USER:-slcw_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password_2024}
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - slcw-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-slcw_user} -d ${POSTGRES_DB:-shard_legends_dev}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # No external ports - only internal network access

  # Redis 8.0.2 - Session store and cache
  redis:
    image: redis:8.0.2-alpine
    container_name: slcw-redis-dev
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - slcw-dev
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # No external ports - only internal network access

volumes:
  postgres_data:
    name: slcw-postgres-dev
  redis_data:
    name: slcw-redis-dev
  auth_jwt_keys:
    name: slcw-auth-jwt-keys-dev

networks:
  slcw-dev:
    name: slcw-dev
    driver: bridge
  slcw-monitoring:
    external: true
    name: slcw-monitoring