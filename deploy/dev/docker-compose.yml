services:
  # API Gateway - Internal microservices aggregator
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: slcw-api-gateway-dev
    ports:
      - "127.0.0.1:9000:8080"  # Single API endpoint for external nginx
    networks:
      - slcw-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - ping-service
      - telegram-bot-service

  # Frontend service
  frontend:
    build:
      context: ../..
      dockerfile: deploy/dev/frontend.Dockerfile
    container_name: slcw-frontend-dev
    ports:
      - "127.0.0.1:8092:9002"  # Map to dev frontend port as per nginx config
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
    networks:
      - slcw-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9002"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ping service (test microservice)
  ping-service:
    build:
      context: ../../services/ping-service
      dockerfile: Dockerfile
    container_name: slcw-ping-service-dev
    # No external ports - accessed via API Gateway
    networks:
      - slcw-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Telegram Bot Service
  telegram-bot-service:
    build:
      context: ../../services/telegram-bot-service
      dockerfile: Dockerfile
    container_name: slcw-telegram-bot-dev
    # No external ports - accessed via API Gateway
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_MODE=${TELEGRAM_BOT_MODE:-longpoll}
      - TELEGRAM_POLL_TIMEOUT=${TELEGRAM_POLL_TIMEOUT:-30}
      - WEBAPP_BASE_URL=${WEBAPP_BASE_URL:-https://dev.slcw.dimlight.online}
      - MINI_APP_SHORT_NAME=${MINI_APP_SHORT_NAME}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL:-}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN:-}
      - TELEGRAM_ALLOWED_USERS=${TELEGRAM_ALLOWED_USERS:-}
      - SERVICE_PORT=8080
    networks:
      - slcw-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Telegram Bot Service - Forly (optional)
  telegram-bot-service-forly:
    build:
      context: ../../services/telegram-bot-service
      dockerfile: Dockerfile
    container_name: slcw-telegram-bot-forly-dev
    # No external ports - accessed via API Gateway
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN_FORLY:-DISABLED}
      - TELEGRAM_BOT_MODE=${TELEGRAM_BOT_MODE_FORLY:-longpoll}
      - TELEGRAM_POLL_TIMEOUT=${TELEGRAM_POLL_TIMEOUT_FORLY:-30}
      - WEBAPP_BASE_URL=${WEBAPP_BASE_URL_FORLY:-https://dev-forly.slcw.dimlight.online}
      - MINI_APP_SHORT_NAME=${MINI_APP_SHORT_NAME_FORLY:-DISABLED}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL_FORLY:-}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN_FORLY:-}
      - TELEGRAM_ALLOWED_USERS=${TELEGRAM_ALLOWED_USERS_FORLY:-}
      - SERVICE_PORT=8080
    networks:
      - slcw-dev
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles:
      - forly

networks:
  slcw-dev:
    name: slcw-dev
    driver: bridge