---
description: 
globs: 
alwaysApply: false
---
# Правила написания кода для Shard Legends: Clan Wars

## Общие принципы

1. **KISS (Keep It Simple, Stupid)**: Начинайте с простых решений
2. **FAIL FAST**: Не используйте try/except без необходимости - пусть ошибки проявляются быстро
3. **DRY (Don't Repeat Yourself)**: Избегайте дублирования кода и данных
4. **Separation of Concerns**: Разделяйте хранение данных и бизнес-логику

## Структура монорепозитория

```
shard_legends/
├── services/           # Инфраструктурные сервисы
│   ├── api-gateway/    # API Gateway для внешних запросов
│   ├── auth/           # Сервис аутентификации и авторизации
│   ├── game-engine/    # Игровая логика и match-3 механики
│   └── clan-manager/   # Управление кланами и территориями
├── utils/              # Общие утилиты и библиотеки
│   ├── db/             # Работа с базами данных
│   ├── cache/          # Кеширование
│   └── messaging/      # Межсервисное взаимодействие
├── migrations/         # Миграции БД
├── scripts/            # Скрипты для автоматизации
├── deploy/             # Конфигурации развертывания
│   ├── dev/            # Настройки для dev окружения
│   ├── test/           # Настройки для test окружения
│   └── prod/           # Настройки для production
├── docs/               # Документация проекта
│   ├── architecture/   # Архитектурные решения
│   ├── specs/          # API спецификации
│   └── concept/        # Бизнес-концепция
└── tasks/              # Kanban-доска задач

## Безопасность

1. **НИКОГДА** не коммитьте секреты в репозиторий
2. Используйте `.env` файлы для локальной разработки
3. Валидируйте все входные данные
4. Санитизируйте данные перед записью в БД
5. Логируйте безопасные версии данных (без PII)

## Производительность

1. Применяйте AsyncNode для I/O операций
2. Кешируйте результаты дорогих операций
3. Мониторьте использование памяти в больших потоках
4. Устанавливайте таймауты для внешних вызовов

## Git workflow

1. Никогда не коммитьте напрямую в main
2. Используйте feature branches: `feature/description`
3. Пишите осмысленные commit messages
4. Делайте atomic commits (один commit = одно изменение)
5. Запускай тесты перед push