---
description: 
globs: 
alwaysApply: true
---
# Руководство для AI-ассистентов в Shard Legends: Clan Wars

## Контекст проекта

Shard Legends: Clan Wars — Стратегическая match-3 игра, где ты создаёшь клан, добываешь ресурсы, защищаешь территорию, участвуешь в клановых войнах и строишь свою эко

### Ключевые артефакты проекта:
- `docs/architecture/architecture.md`: **Главный документ** - архитектура
- `docs/concept/overview.md`: Бизнес-концепция и цели проекта
- `tasks/roadmap.md`: **Стратегия развития** - высокоуровневые вехи и план
- `tasks/`: **Система Kanban** - текущие задачи с кодами ролей (A-, D-, T-, I-, U-, P-)
- `docs/architecture/deployment-strategy.md` - Стратегия развертывания системы, управление нижними и продуктивной средой
- `docs/architecture/migration-strategy.md`: **Управление миграциями БД** - декларативный подход к схеме
- `docs/architecture/architecture.md`
- `docs/application-services/`: **Прикладные сервисы** - отдельные компоненты системы
- `docs/architecture/`: Архитектурные решения и диаграммы
- `docs/specs/`: API спецификации и контракты
- `deploy/`: Конфигурации для разных сред (dev, test, prod)

## Стандарты выполнения задач по ролям

### Задачи аналитика (A-*)
**Когда**: Исследования, написание требований, анализ данных
**Обязательные шаги**:
1. Изучить `docs/concept/overview.md` и текущую дорожную карту `tasks/roadmap.md`
2. Проанализировать существующую документацию в `docs/`
3. Создать спецификации достаточные для реализации, без избыточной информации
4. Убедиться что требования соответствуют архитектуре проекта
**Используйте**: `repository-guidelines.mdc`

### Задачи разработчика (D-*)
**Когда**: Реализация агентов, утилит, API
**Обязательные шаги**:
1. **Изучить артефакты**: Проанализировать `README.md`, архитектуру, требования
2. **Определить сп реализации**
3. **Реализовать функциональность**: В соответствии с паттернами проекта
4. **Написать тесты**: Unit-тесты с покрытием не менее 80% для новой логики
5. **Проверить качество**: Линтинг, соответствие стандартам кодирования
**Используйте**: `coding_rules.mdc` + `agentic.mdc`

### Задачи тестировщика (T-*)
**Когда**: Написание тестов, QA, проверка качества
**Обязательные шаги**:
1. Создать comprehensive test suite для функциональности
2. Проверить edge cases и error handling
3. Убедиться в соответствии спецификациям
4. Валидировать интеграции между сервисами

### Задачи инфраструктуры (I-*)
**Когда**: DevOps, CI/CD, настройка окружения, управление задачами
**Используйте**: `repository-guidelines.mdc` + `task-management.mdc`

### Задачи UX/UI (U-*)
**Когда**: Дизайн интерфейсов, пользовательский опыт
**Фокус**: Веб-интерфейс для управления агентами, дашборды мониторинга

### Задачи продакт-менеджера (P-*)  
**Когда**: Планирование, приоритизация, продуктовые решения
**Права**: Единственная роль, которая может переводить задачи из [?] в [x]

## Стандарты качества кода

### Для задач разработки (D-*)
1. **Unit-тесты**: Обязательны для всех новых функций, покрытие ≥80%
2. **Линтинг**: Код должен проходить проверку линтером без ошибок
3. **Комментарии**: Только для неочевидных участков, избегать избыточности  
4. **Логирование**: На английском языке, информативные сообщения, стандартные уровни
5. **PocketFlow**: Строго следовать паттерну prep → exec → post для узлов

### Правила валидации
1. Каждое требование должно иметь спецификацию в `docs/specs/`
2. Код должен соответствовать архитектуре из `docs/architecture/`
3. Общие утилиты должны быть переиспользуемы между сервисами
4. Все API должны быть документированы в OpenAPI формате

## Обработка ошибок и неполноты

1. **Противоречие архитектуре** → ПЕРЕСМОТРЕТЬ решение с учетом `docs/architecture/`
2. **Отсутствие спецификации** → ДОБАВИТЬ TODO с комментарием
3. **Нарушение PocketFlow паттернов** → ИСПРАВИТЬ согласно `agentic.mdc`
4. **Дублирование кода между сервисами** → ВЫНЕСТИ в общие утилиты
6. **Некорректная работа с задачами** → СЛЕДОВАТЬ `task-management.mdc`

### Ограничения для AI
- ❌ Нельзя переводить задачи из [?] в [x] (только человек/продакт-менеджер)
- ❌ Нельзя создавать файлы без необходимости
- ❌ Нельзя изменять архитектуру без обсуждения
- ✅ Начинать с простых решений (KISS)
- ✅ Использовать общие утилиты из utils/
- ✅ Следовать установленным паттернам PocketFlow

## Быстрые ссылки
- `README.md` — обзор проекта
- `tasks/` — система Kanban
- `docs/concept/overview.md` — бизнес-контекст
