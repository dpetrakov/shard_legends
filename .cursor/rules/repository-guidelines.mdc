---
description: 
globs: 
alwaysApply: false
---
# Правила ведения репозитория Shard Legends: Clan Wars

## Структура проекта

Проект следует микросервисной архитектуре с четкой организацией файлов:

- [README.md](mdc:README.md) — обзор проекта и быстрый старт
- `docs/` — вся документация проекта
- `deploy/` — инфраструктура и конфигурации развертывания
- `scripts/` — вспомогательные скрипты автоматизации
- `tasks/` — управление задачами по Kanban

## Принципы работы

### Документация
- Вся документация ведется на русском языке
- Концептуальные документы в [docs/concept/](mdc:docs/concept)
- Технические спецификации в [docs/specs/](mdc:docs/specs)
- Архитектурные решения в [docs/architecture/](mdc:docs/architecture)

### Управление задачами
- Используется легкая Kanban-система в папке `tasks/`
- Все задачи имеют уникальные коды по ролям: A-*, D-*, T-*, I-*, U-*, P-*
- Подробности в [task-management.mdc](mdc:.cursor/rules/task-management.mdc)

### Микросервисы
- Каждый сервис в отдельной папке в `services/`
- Независимые развертывания и масштабирование
- Четкие API контракты между сервисами

### Среды разработки
- `deploy/dev/` — локальная разработка (docker-compose)
- `deploy/test/` — тестовая среда
- `deploy/prod/` — продакшн

## Соглашения о коммитах

Используйте семантические коммиты:

```
<тип>(<область>): <описание>

<необязательное подробное описание>

<необязательные нижние колонтитулы>
```

### Типы коммитов:
- `feat:` — новая функция
- `fix:` — исправление бага
- `docs:` — изменения в документации
- `style:` — форматирование, отсутствующие точки с запятой и т.д.
- `refactor:` — рефакторинг кода
- `test:` — добавление тестов
- `chore:` — обновление сборки или вспомогательных инструментов

### Примеры:
```
feat(auth): добавить JWT аутентификацию
fix(scheduler): исправить утечку памяти в cron задачах
docs(api): обновить OpenAPI спецификацию
```

## Рабочий процесс

1. **Планирование**: Задачи создаются и приоритизируются в `tasks/`
2. **Разработка**: Создание веток от `main`, работа с задачами
3. **Тестирование**: Локальное тестирование, CI/CD проверки
4. **Ревью**: Code review, приемка задач продакт-оунером
5. **Развертывание**: Merge в `main`, автоматическое развертывание

## Качество кода

- Код и комментарии на английском языке
- Документация на русском языке
- Покрытие тестами критически важных компонентов
- Линтеры и форматтеры для единообразия стиля
- Регулярные ретроспективы и улучшения процессов

## Безопасность

- Никаких секретов в коде
- Использование переменных окружения для конфиденциальных данных
- Регулярные обновления зависимостей
- Аудит безопасности перед продакшн-релизами
